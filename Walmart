#DataCamp Project

import pandas as pd
import os

def extract(sales_data, additional_data_path):
    additional_data_df = pd.read_parquet(additional_data_path)
    merged_data_df = sales_data.merge(additional_data_df, on='index')
    return merged_data_df

# Assuming grocery_sales is a predefined DataFrame
merged_data_df = extract(grocery_sales, "extra_data.parquet")

def transform(data):
    data.fillna({
        'CPI': data['CPI'].mean(),
        'Unemployment': data['Unemployment'].mean(),
        'Weekly_Sales': data['Weekly_Sales'].mean()
    }, inplace=True)
    data['Date'] = pd.to_datetime(data['Date'], format='%Y-%m-%d')
    data['Month'] = data['Date'].dt.month
    data = data.loc[data['Weekly_Sales'] > 10000, :]
    data = data.drop(['index', 'Temperature', 'Fuel_Price', 'MarkDown1', 'MarkDown2', 'MarkDown3', 'MarkDown4', 'MarkDown5', 'Type', 'Size', 'Date'], axis=1)
    return data

cleaned_data = transform(merged_data_df)

def calculate_average_monthly_sales(cleaned_data):
    avg_sales = cleaned_data[['Month', 'Weekly_Sales']]
    avg_sales = avg_sales.groupby('Month').agg(Average_Sales=('Weekly_Sales', 'mean')).reset_index().round(2)
    return avg_sales

average_sales_data = calculate_average_monthly_sales(cleaned_data)

def load_to_csv(full_data, full_data_file_path, aggregated_data, aggregated_data_file_path):
    full_data.to_csv(full_data_file_path, index=False)
    aggregated_data.to_csv(aggregated_data_file_path, index=False)

load_to_csv(cleaned_data, 'cleaned_data.csv', average_sales_data, 'average_sales_data.csv')

def validate_file_existence(file_path):
    file_exists = os.path.exists(file_path)
    if not file_exists:
        raise Exception(f'There is no file at the path {file_path}')
        
validate_file_existence('cleaned_data.csv')
validate_file_existence('average_sales_data.csv')
